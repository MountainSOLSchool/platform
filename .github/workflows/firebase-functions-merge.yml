name: Deploy Firebase Functions on merge

on:
    push:
        branches:
            - main

jobs:
    prepare_and_build:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.get_affected.outputs.matrix }}
            has_changes: ${{ steps.get_affected.outputs.has_changes }}
            cache_key: ${{ steps.set_cache_key.outputs.key }}
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 2

            - name: Get base commit
              id: base
              run: echo "commit=$(git rev-parse HEAD~1)" >> $GITHUB_OUTPUT
            
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                node-version: '18'
                cache: 'npm'

            - name: Generate cache key
              id: set_cache_key
              run: echo "key=${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

            - name: Install dependencies
              run: npm ci

            - name: Get affected functions
              id: get_affected
              run: |
                  # Get affected libraries comparing to previous commit
                  AFFECTED=$(npx nx show projects --affected --base=${{ steps.base.outputs.commit }} | grep 'firebase-enrollment-functions-' || true)
                  
                  FUNCTIONS=()
                  while IFS= read -r lib; do
                    FUNC_NAME=${lib#firebase-enrollment-functions-}
                    if [ "$FUNC_NAME" != "shared" ]; then
                      FUNC_NAME=$(echo "$FUNC_NAME" | awk -F'-' '{for(i=1;i<=NF;i++){if(i==1){printf("%s",$i)}else{printf("%s%s",toupper(substr($i,1,1)),substr($i,2))}}}')
                      FUNCTIONS+=("$FUNC_NAME")
                    fi
                  done <<< "$AFFECTED"
                  
                  if [ ${#FUNCTIONS[@]} -eq 0 ]; then
                    echo "No functions were affected"
                    echo "has_changes=false" >> $GITHUB_OUTPUT
                    echo "matrix=[]" >> $GITHUB_OUTPUT
                  else
                    echo "has_changes=true" >> $GITHUB_OUTPUT
                    
                    GROUP_SIZE=5
                    TOTAL=${#FUNCTIONS[@]}
                    NUM_GROUPS=$(( (TOTAL + GROUP_SIZE - 1) / GROUP_SIZE ))
                    
                    GROUPS_JSON="["
                    for ((i=0; i<$NUM_GROUPS; i++)); do
                      START=$((i * GROUP_SIZE))
                      GROUP_FUNCTIONS=""
                      
                      for ((j=0; j<GROUP_SIZE && START+j<TOTAL; j++)); do
                        if [ ! -z "$GROUP_FUNCTIONS" ]; then
                          GROUP_FUNCTIONS+=","
                        fi
                        GROUP_FUNCTIONS+="functions:${FUNCTIONS[START+j]}"
                      done
                      
                      if [ $i -gt 0 ]; then
                        GROUPS_JSON+=","
                      fi
                      GROUPS_JSON+="{\"functions\":\"$GROUP_FUNCTIONS\"}"
                    done
                    GROUPS_JSON+="]"
                    
                    echo "matrix=$GROUPS_JSON" >> $GITHUB_OUTPUT
                    
                    echo "Total affected functions: $TOTAL"
                    echo "Number of groups: $NUM_GROUPS"
                    echo "Matrix: $GROUPS_JSON"
                  fi

            - name: Build all functions
              if: steps.get_affected.outputs.has_changes == 'true'
              run: npx nx run functions:build

            - name: Cache node_modules for deploy
              if: steps.get_affected.outputs.has_changes == 'true'
              uses: actions/cache/save@v4
              with:
                path: node_modules
                key: ${{ steps.set_cache_key.outputs.key }}

            - name: Upload build artifacts
              if: steps.get_affected.outputs.has_changes == 'true'
              uses: actions/upload-artifact@v4
              with:
                name: dist-functions
                path: |
                  dist/apps/functions/main.cjs
                  dist/apps/functions/main.cjs.map
                retention-days: 1

    deploy:
        needs: prepare_and_build
        if: needs.prepare_and_build.outputs.has_changes == 'true'
        runs-on: ubuntu-latest
        strategy:
            max-parallel: 1
            matrix:
                include: ${{ fromJson(needs.prepare_and_build.outputs.matrix) }}
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 1

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                node-version: '18'

            - name: Restore cached node_modules
              uses: actions/cache/restore@v4
              with:
                path: node_modules
                key: ${{ needs.prepare_and_build.outputs.cache_key }}
                fail-on-cache-miss: true

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                name: dist-functions
                path: dist/apps/functions

            - name: Verify download
              run: ls -la dist/apps/functions/

            - name: Deploy functions group
              id: deploy
              uses: w9jds/firebase-action@v13.31.1
              with:
                  args: deploy --only ${{ matrix.functions }} --project prod
              env:
                  GCP_SA_KEY: ${{ secrets.FIREBASE_GCP_SA_KEY }}

            - name: Handle deployment failure
              if: failure() && steps.deploy.outcome == 'failure'
              run: |
                echo "::error::Failed to deploy functions group: ${{ matrix.functions }}"
                exit 1
